import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.StringTokenizer

//var String ArduinoLuminosityUpdate = ""
var String ArduinoPoidsUpdate = ""

rule Startup
when 
	System started
then
	say("Welcome at openHab!")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end

/*rule "MAJ Luminosité hall Arduino"
when
	Item Arduino received update
	then
		ArduinoLuminosityUpdate = ArduinoLuminosityUpdate + Arduino.state.toString.trim
		println("Arduino Luminosity Update : " + ArduinoLuminosityUpdate)
		val updates = ArduinoLuminosityUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("Luminosity") && update.contains("=")) {
				var IndexLum = update.indexOf("=")
				var Number lum = Integer::parseInt(update.substring(IndexLum + 1, update.indexOf(";")))
				lum = lum * 100 / 155
				if (lum == 0) {
					sendCommand(Light_GF_Hall, OFF)
				} else {
					sendCommand(Light_GF_Hall, ON)
				}
				postUpdate(Luminosite_Hall, lum)
			}
		}
		ArduinoLuminosityUpdate = ""
		sendCommand(Arduino, "ok")
end*/

rule "MAJ Poids Paillasson ArduinoP"
when
	Item ArduinoP received update
	then
		ArduinoPoidsUpdate = ArduinoPoidsUpdate + ArduinoP.state.toString.trim
		println("Arduino Poids Update : " + ArduinoPoidsUpdate)
		val updates = ArduinoPoidsUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("Poids") && update.contains("=")) {
				var IndexPoids = update.indexOf("=")
				var Number p = Integer::parseInt(update.substring(IndexPoids + 1, update.indexOf(";")))
				//p = p 
				say("La valeur p est égale à " + p)
				if (p > 1000) {
					sendCommand(Paillasson_Entrance, OFF)
				} else {
					sendCommand(Paillasson_Entrance, ON)
				}
				postUpdate(Poids_Entrance, p)
			}
		}
		ArduinoPoidsUpdate = ""
		sendCommand(ArduinoP, "ok")
end

/*rule "test"
when
	Item Light_Presence received command
	then
		sendCommand(Arduino, "salut")
end*/
