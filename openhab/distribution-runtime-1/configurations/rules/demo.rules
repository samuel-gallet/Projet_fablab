import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.StringTokenizer

import javax.xml.parsers.*
import org.w3c.dom.*
import org.xml.sax.* 
import java.io.*

//var String ArduinoLuminosityUpdate = ""
//var String ArduinoPoidsUpdate = ""
//var String ArduinoCaptUpdate = ""
var String ArduinoIntelligentUpdate = ""
//var Number nb = 0
//var Boolean Personne = false
var Boolean attenteCapteur = false
var Boolean attentePaillasson = false
var Boolean intrusion = false
var Timer paillassonTimer
var Timer capteurTimer
var Timer intrusionTimer
var Number nbPersonne = 0

rule Startup
when 
	System started
then
	say("Hello Hélène Robin Audrey Samuel et Caroline !")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end


/*rule "Entree maison et MAJ poids et allumer si first"
when
	Item ArduinoIntelligent received update
	then
		ArduinoIntelligentUpdate = ArduinoIntelligentUpdate + ArduinoIntelligent.state.toString.trim
		val majs = ArduinoIntelligentUpdate.split("\n")
		for (maj : majs) {
			if (maj.contains("entree") || maj.contains("sortie")){
				println("Arduino Intelligent Update : " + maj)
				val updates = maj.split(";")
				for(update : updates) {
					println("update -> " + update)
					if (update.contains("p") && update.contains("=")) {
						var p = update.indexOf("=")
						var Number Poids = Integer::parseInt(update.substring(p + 1, update.length))
						postUpdate(Poids_Entrance, Poids)
					}
					if (update.contains("nb") && update.contains("=")) {
						var nbpers = update.indexOf("=")
						var Number nbpersonne = Integer::parseInt(update.substring(nbpers + 1, update.length))
						postUpdate(Personnes, nbpersonne)
						if (nbpersonne == 1 || Light_GF_Hall.state == OFF) {
							sendCommand(ArduinoIntelligent, "switch on;")
							postUpdate(Light_GF_Hall,ON)
						}else if (nbpersonne == 0 && Light_GF_Hall.state == ON) {
							sendCommand(ArduinoIntelligent, "switch off;")
							postUpdate(Light_GF_Hall,OFF)
						}
					}
				}
			}
			if (maj.contains("intrusion")) {
					say ("Help !! There is a problem in your house!")
					//sendMail("samuel.gallet@gmail.com", "Voleur!!", "Voleur présent chez toi")
			}
			if (maj.contains("meteo")) {
				
				var weather = Weather_Temperature.state.toString.trim
				println(weather)
				if (weather.contains("Rain") || weather.contains("Thunderstorms")
					|| weather.contains("Drizzle") || weather.contains("Showers")
					|| weather.contains("Snow")
				)
					sendCommand(ArduinoIntelligent, "blue;")
				else if (weather.contains("Sunny") ||
					weather.contains("Hot") || weather.contains("Fair")
				)
					sendCommand(ArduinoIntelligent, "yell;")
				else 
					sendCommand(ArduinoIntelligent, "whit;")
			}
			/*
			var doc = new DOMDocument()
			doc.load('http://weather.yahooapis.com/forecastrss?w=12724717&u=c')
			var CondNode = doc.getElementByTagname("yweather:condition").item(0)
			var condition_string = CondNode.attributes.text.value
			 
		}
		ArduinoIntelligentUpdate = ""
end*/

/*rule "Sortie maison et MAJ poids et eteindre si dernier"
when
	Item ArduinoIntelligent received update
	then
		ArduinoIntelligentUpdate = ArduinoIntelligentUpdate + ArduinoIntelligent.state.toString.trim
		if (!ArduinoIntelligentUpdate.contains("sortie")){
			println("Arduino Intelligent Update : " + ArduinoIntelligentUpdate)
			val updates = ArduinoIntelligentUpdate.split("\n")
			for(update : updates) {
				println("update -> " + update)
				if (update.contains("p") && update.contains("=")) {
					var p = update.indexOf("=")
					var Number Poids = Integer::parseInt(update.substring(p + 1, update.indexOf(";")))
					postUpdate(Poids_Entrance, Poids)
				}
				if (update.contains("nb") && update.contains(":")) {
					var nbpers = update.indexOf(":")
					var Number nbpersonne = Integer::parseInt(update.substring(nbpers + 1, update.indexOf(";")))
					postUpdate(Personnes, nbpersonne)
					if (nbpersonne == 0 && Light_GF_Hall.state == ON) {
						postUpdate(Luminosite_Hall, 0)
						sendCommand(ArduinoIntelligent, "switch off;")
					}
				}
				if (update.contains("intrusion")) {
					say ("Help !! There is a problem in your house!")
				}
			}
		}
		ArduinoIntelligentUpdate = ""
end
*/

rule "IA"
	when 
		Item ArduinoIntelligent received update
	then
		ArduinoIntelligentUpdate = ArduinoIntelligentUpdate + ArduinoIntelligent.state.toString.trim
		val majs = ArduinoIntelligentUpdate.split("\n")
		for (maj : majs) {
			println("update -> " + maj)
			if (maj.contains("paillasson")) {
				if (attentePaillasson){
					if (nbPersonne > 0) {
						nbPersonne = nbPersonne - 1
						postUpdate(Personnes, nbPersonne)
					}
					if (nbPersonne == 0 && Light_GF_Hall.state == ON) {
							sendCommand(ArduinoIntelligent, "switch off;")
							postUpdate(Light_GF_Hall,OFF)
					}
					attentePaillasson = false
				} else {
					attenteCapteur = true;
					capteurTimer = createTimer(now.plusSeconds(5), [ |
						attenteCapteur = false;
					])	
				}
			}
			if (maj.contains("capteur")) {
				if (attenteCapteur) {
					nbPersonne = nbPersonne + 1
					postUpdate(Personnes, nbPersonne)
					if (nbPersonne == 1 || Light_GF_Hall.state == OFF) {
							sendCommand(ArduinoIntelligent, "switch on;")
							postUpdate(Light_GF_Hall,ON)
					}
					attenteCapteur = false
				} else {
					if (nbPersonne == 0 && !intrusion) {
						sendMail("samuel.gallet@gmail.com", "Voleur!!", "Voleur présent chez toi")
						intrusion = true
						intrusionTimer = createTimer(now.plusSeconds(60), [|
							intrusion = false;
						])
					}
					//if(!attentePaillasson && nbPersonne > 0)
						//sendCommand(ArduinoIntelligent, "meteo;")
					attentePaillasson = true;
					paillassonTimer = createTimer(now.plusSeconds(5), [ |
						attentePaillasson = false
					])
				}
			}
				
		}
		
end

rule "Modifier eclairage depuis openHab"
when
	Item Light_GF_Hall received update
	then
		if(Light_GF_Hall.state == ON)
			sendCommand(ArduinoIntelligent, "switch on;")
		else {
			sendCommand(ArduinoIntelligent, "switch off;")
		}
end


/*rule "MAJ Luminosité hall Arduino"
when
	Item ArduinoLum received update
	then
		ArduinoLuminosityUpdate = ArduinoLuminosityUpdate + ArduinoLum.state.toString.trim
		if (!ArduinoLuminosityUpdate.contains("Luminosity"))
			println("Arduino Luminosity Update : " + ArduinoLuminosityUpdate)
		val updates = ArduinoLuminosityUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("Luminosity") && update.contains("=")) {
				var IndexLum = update.indexOf("=")
				var Number lum = Integer::parseInt(update.substring(IndexLum + 1, update.indexOf(";")))
				lum = lum * 100 / 155
				postUpdate(Luminosite_Hall, lum)
			}
		}
		ArduinoLuminosityUpdate = ""
end




rule "MAJ Poids Paillasson ArduinoP"
when
	Item ArduinoP received update
	then
		ArduinoPoidsUpdate = ArduinoPoidsUpdate + ArduinoP.state.toString.trim
		println("Arduino Poids Update : " + ArduinoPoidsUpdate)
		val updates = ArduinoPoidsUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("Poids") && update.contains("=")) {
				var IndexPoids = update.indexOf("=")
				var Number p = Integer::parseInt(update.substring(IndexPoids + 1, update.indexOf(";")))
				if (p > 400) {
					sendCommand(Paillasson_Entrance, OFF)
				} else {
					sendCommand(ArduinoCapt, "attente capteur;")
					//sendCommand(Paillasson_Entrance, ON)
					//postUpdate(Light_GF_Hall,ON)
				}
				postUpdate(Poids_Entrance, p)
			}
		}
		ArduinoPoidsUpdate = ""
end


rule "MAJ Poids Paillasson Sortie ArduinoCapt"
when
	Item ArduinoCapt received update
	then
		ArduinoCaptUpdate = ArduinoCaptUpdate + ArduinoCapt.state.toString.trim
		println("Arduino Capteur Update : " + ArduinoCaptUpdate)
		val updates = ArduinoCaptUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("attente sortie")) {
				//var IndexPoids = update.indexOf("=")
				//var Number p = Integer::parseInt(update.substring(IndexPoids + 1, update.indexOf(";")))
				sendCommand(ArduinoP, "attente paillasson;")
			}
		}
		ArduinoPoidsUpdate = ""
end

rule "MAJ Capteur"
when 
	Item ArduinoCapt received update
	then
		ArduinoCaptUpdate = ArduinoCaptUpdate + ArduinoCapt.state.toString.trim
		println("Arduino Capteur Update : " + ArduinoCaptUpdate)
		val updates = ArduinoCaptUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("Personne +1")) {
				nb = nb + 1
				postUpdate(Personnes, nb)
				postUpdate(Light_GF_Hall, ON)
				sendCommand(Paillasson_Entrance, ON)
			}
		}
		ArduinoCaptUpdate = ""
	
end


rule "MAJ Paillasson sortie"
when 
	Item ArduinoP received update
	then
		ArduinoPoidsUpdate = ArduinoPoidsUpdate + ArduinoP.state.toString.trim
		println("Arduino Paillasson sortie Update : " + ArduinoPoidsUpdate)
		val updates = ArduinoPoidsUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("sortie de la maison")) {
				if (nb<=0) {
					say ("Help !! There is a problem in your house!")
				} 
				else{
					nb = nb-1
					postUpdate(Personnes, nb)
					if (nb == 0) {
						postUpdate(Light_GF_Hall, OFF)
						sendCommand(Paillasson_Entrance, OFF)
					}
				}
			}
		}
		ArduinoCaptUpdate = ""
	
end*/

	