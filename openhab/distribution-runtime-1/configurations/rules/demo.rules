import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.StringTokenizer


var String ArduinoLuminosityUpdate = ""
var String ArduinoPoidsUpdate = ""
var String ArduinoCaptUpdate = ""
var Number nb = 0
var Boolean Personne = false

rule Startup
when 
	System started
then
	say("Hello Hélène Robin Audrey Samuel et Caroline !")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end

rule "MAJ Luminosité hall Arduino"
when
	Item ArduinoLum received update
	then
		ArduinoLuminosityUpdate = ArduinoLuminosityUpdate + ArduinoLum.state.toString.trim
		if (!ArduinoLuminosityUpdate.contains("Luminosity"))
			println("Arduino Luminosity Update : " + ArduinoLuminosityUpdate)
		val updates = ArduinoLuminosityUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("Luminosity") && update.contains("=")) {
				var IndexLum = update.indexOf("=")
				var Number lum = Integer::parseInt(update.substring(IndexLum + 1, update.indexOf(";")))
				lum = lum * 100 / 155
				postUpdate(Luminosite_Hall, lum)
			}
		}
		ArduinoLuminosityUpdate = ""
end

rule "Entree ou sortie de la maison"
when
	Item ArduinoP received update or
	Item ArduinoCapt received update
	then
		if (Personne == false) {
		//on attend un peu et si la personne rentre, on affiche son poids
			Personne = true
			trigger = newTrigger()
			    	.withIdentity("trigger3", "group1")
			    	.withSchedule(cronSchedule("5 ? ? ? ? ?"))
			    	.forJob(myJobKey)
			    	.build()
			if (ArduinoP received update) {
				ArduinoPoidsUpdate = ArduinoPoidsUpdate + ArduinoP.state.toString.trim
				println("Arduino Poids Update : " + ArduinoPoidsUpdate)
				val updates = ArduinoPoidsUpdate.split("\n")
				for(update : updates) {
					println("update -> " + update)
					if (update.contains("Poids") && update.contains("=")) {
						var IndexPoids = update.indexOf("=")
						var Number p = Integer::parseInt(update.substring(IndexPoids + 1, update.indexOf(";")))
						// A voir car on dit explicitement à arduino de ne pas envoyer de donnée supérieur à 550
						if (p > 550) {
							sendCommand(Paillasson_Entrance, OFF)
						}
						postUpdate(Poids_Entrance, p)				
					}
			}	
		} else {
			//Une personne est deja passée soit devant le capteur soit sur le paillasson
			Personne = false
			// Si une personne passe devant le capteur, elle rentre dans la maison
			if (ArduinoCapt received update) {
				ArduinoCaptUpdate = ArduinoCaptUpdate + ArduinoCapt.state.toString.trim
				println("Arduino Capteur Update : " + ArduinoCaptUpdate)
				val updates = ArduinoCaptUpdate.split("\n")
				for(update : updates) {
					println("update -> " + update)
					if (update.contains("attente sortie")) {
						nb = nb + 1
						postUpdate(Personnes, nb)
						postUpdate(Light_GF_Hall, ON)
						sendCommand(Paillasson_Entrance, ON)
					}
				}
			//Si un personne passe sur le paillasson, elle sort de la maison
			} else { 
				ArduinoPoidsUpdate = ArduinoPoidsUpdate + ArduinoP.state.toString.trim
				println("Arduino Poids Update : " + ArduinoPoidsUpdate)
				val updates = ArduinoPoidsUpdate.split("\n")
				for(update : updates) {
					println("update -> " + update)
					if (update.contains("Poids") && update.contains("=")) {
						var IndexPoids = update.indexOf("=")
						var Number p = Integer::parseInt(update.substring(IndexPoids + 1, update.indexOf(";")))
						// A voir car on dit explicitement à arduino de ne pas envoyer de donnée supérieur à 550
						if (p > 550) {
							sendCommand(Paillasson_Entrance, OFF)
						}
						postUpdate(Poids_Entrance, p)				
					}				
				if (nb<=0) {
					say ("Help !! There is a problem in your house!")
				} 
				else{
					nb = nb-1
					postUpdate(Personnes, nb)
					if (nb == 0) {
						postUpdate(Light_GF_Hall, OFF)
						sendCommand(Paillasson_Entrance, OFF)
					}			
				}	
			}
		}
		ArduinoPoidsUpdate = ""
end


/*rule "MAJ Poids Paillasson ArduinoP"
when
	Item ArduinoP received update
	then
		ArduinoPoidsUpdate = ArduinoPoidsUpdate + ArduinoP.state.toString.trim
		println("Arduino Poids Update : " + ArduinoPoidsUpdate)
		val updates = ArduinoPoidsUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("Poids") && update.contains("=")) {
				var IndexPoids = update.indexOf("=")
				var Number p = Integer::parseInt(update.substring(IndexPoids + 1, update.indexOf(";")))
				if (p > 550) {
					sendCommand(Paillasson_Entrance, OFF)
				} else {
					sendCommand(ArduinoCapt, "attente capteur;")
					//sendCommand(Paillasson_Entrance, ON)
					//postUpdate(Light_GF_Hall,ON)
				}
				postUpdate(Poids_Entrance, p)
			}
		}
		ArduinoPoidsUpdate = ""
end


rule "MAJ Poids Paillasson Sortie ArduinoCapt"
when
	Item ArduinoCapt received update
	then
		ArduinoCaptUpdate = ArduinoCaptUpdate + ArduinoCapt.state.toString.trim
		println("Arduino Capteur Update : " + ArduinoCaptUpdate)
		val updates = ArduinoCaptUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("attente sortie")) {
				//var IndexPoids = update.indexOf("=")
				//var Number p = Integer::parseInt(update.substring(IndexPoids + 1, update.indexOf(";")))
				sendCommand(ArduinoP, "attente paillasson;")
			}
		}
		ArduinoPoidsUpdate = ""
end*/



rule "test"
when
	Item Light_GF_Hall received update
	then
		if(Light_GF_Hall.state == ON)
			sendCommand(ArduinoLum, "switch on;")
		else {
			postUpdate(Luminosite_Hall, 0)
			sendCommand(ArduinoLum, "switch off;")
		}
end

/*rule "MAJ Capteur"
when 
	Item ArduinoCapt received update
	then
		ArduinoCaptUpdate = ArduinoCaptUpdate + ArduinoCapt.state.toString.trim
		println("Arduino Capteur Update : " + ArduinoCaptUpdate)
		val updates = ArduinoCaptUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("Personne +1")) {
				nb = nb + 1
				postUpdate(Personnes, nb)
				postUpdate(Light_GF_Hall, ON)
				sendCommand(Paillasson_Entrance, ON)
			}
		}
		ArduinoCaptUpdate = ""
	
end


rule "MAJ Paillasson sortie"
when 
	Item ArduinoP received update
	then
		ArduinoPoidsUpdate = ArduinoPoidsUpdate + ArduinoP.state.toString.trim
		println("Arduino Paillasson sortie Update : " + ArduinoPoidsUpdate)
		val updates = ArduinoPoidsUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("sortie de la maison")) {
				if (nb<=0) {
					say ("Help !! There is a problem in your house!")
				} 
				else{
					nb = nb-1
					postUpdate(Personnes, nb)
					if (nb == 0) {
						postUpdate(Light_GF_Hall, OFF)
						sendCommand(Paillasson_Entrance, OFF)
					}
				}
			}
		}
		ArduinoCaptUpdate = ""
	
end*/

rule "Affichage Meteo"
	when 
		Item ArduinoCapt received update
	then
		switch (Weather_Temperature ) {
			case Weather_Temperature.Contains("Rain") : 
			case Weather_Temperature.Contains("Thunderstorms") :
			case Weather_Temperature.Contains("Drizzle") :
			case Weather_Temperature.Contains("Showers"):
				sendCommand(ArduinoPorteManteau, "blue")
				
			case Weather_Temperature.Contains("Snow") :
				sendCommand(ArduinoPorteManteau, "white")
				
			case Weather_Temperature.Contains("Sunny") :
			case Weather_Temperature.Contains("Hot") :
				sendCommand(ArduinoPorteManteau, "yellow")
				
			case default :
				sendCommand(ArduinoPorteManteau, "green")
			}
end
}
}
	