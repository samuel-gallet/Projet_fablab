import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.StringTokenizer

import javax.xml.parsers.*
import org.w3c.dom.*
import org.xml.sax.* 
import java.io.*

var String ArduinoIntelligentUpdate = ""
var Boolean attenteCapteur = false
var Boolean attentePaillasson = false
var Boolean intrusion = false
var Timer paillassonTimer
var Timer capteurTimer
var Timer intrusionTimer
var Number nbPersonne = 0

rule Startup
when 
	System started
then
	say("Hello Hélène Robin Audrey Samuel et Caroline !")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end

rule "IA"
	when 
		Item ArduinoIntelligent received update
	then
		ArduinoIntelligentUpdate = ""
		ArduinoIntelligentUpdate = ArduinoIntelligentUpdate + ArduinoIntelligent.state.toString.trim
		val majs = ArduinoIntelligentUpdate.split("\n")
		for (maj : majs) {
			println("update -> " + maj)
			if (maj.contains("paillasson")) {
				if (attentePaillasson){
					attentePaillasson = false
					paillassonTimer.cancel
					if (nbPersonne > 0) {
						nbPersonne = nbPersonne - 1
						postUpdate(Personnes, nbPersonne)
					}
					if (nbPersonne == 0 && Light_GF_Hall.state == ON) {
							sendCommand(ArduinoIntelligent, "switch off;")
							postUpdate(Light_GF_Hall,OFF)
					}
				} else {
					attenteCapteur = true;
					if (capteurTimer == null || capteurTimer.hasTerminated)
						capteurTimer = createTimer(now.plusSeconds(7), [ |
							attenteCapteur = false;
							println("fin attente capteur")
						])	
				}
			}
			if (maj.contains("capteur")) {
				if (attenteCapteur) {
					attenteCapteur = false
					capteurTimer.cancel
					nbPersonne = nbPersonne + 1
					postUpdate(Personnes, nbPersonne)
					if (nbPersonne == 1 || Light_GF_Hall.state == OFF) {
							sendCommand(ArduinoIntelligent, "switch on;")
							postUpdate(Light_GF_Hall,ON)
					}
					var weather = Weather_Temperature.state.toString.trim
						if (weather.contains("Rain") || weather.contains("Thunderstorms")
							|| weather.contains("Drizzle") || weather.contains("Showers")
							|| weather.contains("Snow")
						)
							sendCommand(ArduinoIntelligent, "blue;")
						else if (weather.contains("Sunny") ||
							weather.contains("Hot") || weather.contains("Fair")
						)
							sendCommand(ArduinoIntelligent, "yell;")
						else 
							sendCommand(ArduinoIntelligent, "whit;")
				} else {
					attentePaillasson = true;
					if (nbPersonne == 0 && !intrusion) {
						sendMail("samuel.gallet@gmail.com", "Voleur!!", "Voleur présent chez toi")
						intrusion = true
						if (intrusionTimer == null || intrusionTimer.hasTerminated)
							intrusionTimer = createTimer(now.plusSeconds(60), [|
								intrusion = false;
							])
					} else if (nbPersonne > 0) {
						var weather = Weather_Temperature.state.toString.trim
						if (weather.contains("Rain") || weather.contains("Thunderstorms")
							|| weather.contains("Drizzle") || weather.contains("Showers")
							|| weather.contains("Snow")
						)
							sendCommand(ArduinoIntelligent, "blue;")
						else if (weather.contains("Sunny") ||
							weather.contains("Hot") || weather.contains("Fair")
						)
							sendCommand(ArduinoIntelligent, "yell;")
						else 
							sendCommand(ArduinoIntelligent, "whit;")
							
					} 
					if (paillassonTimer == null || paillassonTimer.hasTerminated)
						paillassonTimer = createTimer(now.plusSeconds(10), [ |
							attentePaillasson = false
							println("fin attente paillasson")
						])
				}
			}
				
		}
		ArduinoIntelligentUpdate = ""
		
end

rule "Modifier eclairage depuis openHab"
when
	Item Light_GF_Hall received update
	then
		if(Light_GF_Hall.state == ON)
			sendCommand(ArduinoIntelligent, "switch on;")
		else {
			sendCommand(ArduinoIntelligent, "switch off;")
		}
end


