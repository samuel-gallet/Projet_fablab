import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.StringTokenizer

var String ArduinoLuminosityUpdate = ""
var String ArduinoPoidsUpdate = ""
var String ArduinoCaptUpdate = ""

rule Startup
when 
	System started
then
	say("Welcome at openHab!")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end

rule "MAJ Luminosité hall Arduino"
when
	Item ArduinoLum received update
	then
		ArduinoLuminosityUpdate = ArduinoLuminosityUpdate + ArduinoLum.state.toString.trim
		if (!ArduinoLuminosityUpdate.contains("Luminosity"))
			println("Arduino Luminosity Update : " + ArduinoLuminosityUpdate)
		val updates = ArduinoLuminosityUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("Luminosity") && update.contains("=")) {
				var IndexLum = update.indexOf("=")
				var Number lum = Integer::parseInt(update.substring(IndexLum + 1, update.indexOf(";")))
				lum = lum * 100 / 155
				postUpdate(Luminosite_Hall, lum)
			}
		}
		ArduinoLuminosityUpdate = ""
end

rule "MAJ Poids Paillasson ArduinoP"
when
	Item ArduinoP received update
	then
		ArduinoPoidsUpdate = ArduinoPoidsUpdate + ArduinoP.state.toString.trim
		println("Arduino Poids Update : " + ArduinoPoidsUpdate)
		val updates = ArduinoPoidsUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("Poids") && update.contains("=")) {
				var IndexPoids = update.indexOf("=")
				var Number p = Integer::parseInt(update.substring(IndexPoids + 1, update.indexOf(";")))
				//say("La valeur p est égale à " + p)
				if (p > 600) {
					sendCommand(Paillasson_Entrance, OFF)
				} else {
					sendCommand(ArduinoCapt, "attente capteur;")
					sendCommand(Paillasson_Entrance, ON)
					//postUpdate(Light_GF_Hall,ON)
				}
				postUpdate(Poids_Entrance, p)
			}
		}
		ArduinoPoidsUpdate = ""
end

rule "test"
when
	Item Light_GF_Hall received update
	then
		if(Light_GF_Hall.state == ON)
			sendCommand(ArduinoLum, "switch on;")
		else {
			postUpdate(Luminosite_Hall, 0)
			sendCommand(ArduinoLum, "switch off;")
		}
end

rule "MAJ Capteur"
when 
	Item ArduinoCapt received update
	then
		ArduinoCaptUpdate = ArduinoCaptUpdate + ArduinoCapt.state.toString.trim
		println("Arduino Capteur Update : " + ArduinoCaptUpdate)
		val updates = ArduinoCaptUpdate.split("\n")
		for(update : updates) {
			println("update -> " + update)
			if (update.contains("personne detectee")) {
				postUpdate(Light_GF_Hall, ON)
			}
		}
	
end
	